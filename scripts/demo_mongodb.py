#!/usr/bin/env python3
"""
Demonstra√ß√£o MongoDB - An√°lise Preditiva E-commerce
Script para demonstrar opera√ß√µes NoSQL com dados de comportamento e produtos
"""

import os
import sys
import json
from datetime import datetime, timedelta
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pymongo import MongoClient
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√µes de visualiza√ß√£o
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (12, 8)

def conectar_mongodb():
    """Conectar ao MongoDB"""
    try:
        client = MongoClient('mongodb://localhost:27017')
        db = client['ecommerce_demo']
        
        # Testar conex√£o
        db.command('ping')
        print("‚úÖ Conectado ao MongoDB com sucesso!")
        return client, db
    except Exception as e:
        print(f"‚ùå Erro ao conectar MongoDB: {e}")
        return None, None

def analisar_produtos(db):
    """Analisar dados de produtos"""
    print("\nüìä AN√ÅLISE DE PRODUTOS")
    print("=" * 50)
    
    produtos_collection = db['produtos']
    
    # Contar produtos
    total_produtos = produtos_collection.count_documents({})
    produtos_ativos = produtos_collection.count_documents({"ativo": True})
    
    print(f"üì¶ Total de produtos: {total_produtos}")
    print(f"‚úÖ Produtos ativos: {produtos_ativos}")
    
    # An√°lise por categoria
    pipeline_categoria = [
        {"$group": {
            "_id": "$categoria",
            "total_produtos": {"$sum": 1},
            "preco_medio": {"$avg": "$preco"},
            "estoque_total": {"$sum": "$estoque"},
            "avaliacao_media": {"$avg": "$avaliacao_media"}
        }},
        {"$sort": {"total_produtos": -1}}
    ]
    
    resultado_categoria = list(produtos_collection.aggregate(pipeline_categoria))
    
    print("\nüìà An√°lise por Categoria:")
    for cat in resultado_categoria:
        print(f"  {cat['_id']}:")
        print(f"    Produtos: {cat['total_produtos']}")
        print(f"    Pre√ßo m√©dio: R$ {cat['preco_medio']:.2f}")
        print(f"    Estoque total: {cat['estoque_total']}")
        print(f"    Avalia√ß√£o m√©dia: {cat['avaliacao_media']:.1f}")
    
    # Produtos mais caros
    produtos_caros = produtos_collection.find({"ativo": True}).sort("preco", -1).limit(3)
    
    print("\nüí∞ Top 3 Produtos Mais Caros:")
    for produto in produtos_caros:
        print(f"  {produto['nome']}: R$ {produto['preco']:.2f}")
    
    return resultado_categoria

def analisar_comportamento(db):
    """Analisar comportamento dos usu√°rios"""
    print("\nüë• AN√ÅLISE DE COMPORTAMENTO")
    print("=" * 50)
    
    comportamento_collection = db['usuarios_comportamento']
    
    # Pipeline para an√°lise de comportamento
    pipeline_comportamento = [
        {"$unwind": "$eventos"},
        {"$group": {
            "_id": "$usuario_id",
            "total_eventos": {"$sum": 1},
            "page_views": {
                "$sum": {"$cond": [{"$eq": ["$eventos.tipo", "page_view"]}, 1, 0]}
            },
            "clicks": {
                "$sum": {"$cond": [{"$eq": ["$eventos.tipo", "click"]}, 1, 0]}
            },
            "add_to_cart": {
                "$sum": {"$cond": [{"$eq": ["$eventos.tipo", "add_to_cart"]}, 1, 0]}
            },
            "searches": {
                "$sum": {"$cond": [{"$eq": ["$eventos.tipo", "search"]}, 1, 0]}
            },
            "tempo_total": {"$sum": "$eventos.tempo_pagina"},
            "produtos_unicos": {"$addToSet": "$eventos.produto_id"}
        }},
        {"$project": {
            "usuario_id": "$_id",
            "total_eventos": 1,
            "page_views": 1,
            "clicks": 1,
            "add_to_cart": 1,
            "searches": 1,
            "tempo_total": 1,
            "produtos_unicos": {"$size": "$produtos_unicos"},
            "taxa_conversao": {
                "$cond": [
                    {"$gt": ["$page_views", 0]},
                    {"$divide": ["$add_to_cart", "$page_views"]},
                    0
                ]
            },
            "tempo_medio_evento": {
                "$cond": [
                    {"$gt": ["$total_eventos", 0]},
                    {"$divide": ["$tempo_total", "$total_eventos"]},
                    0
                ]
            }
        }},
        {"$sort": {"total_eventos": -1}}
    ]
    
    # Executar pipeline
    comportamento_data = list(comportamento_collection.aggregate(pipeline_comportamento))
    
    if comportamento_data:
        comportamento_df = pd.DataFrame(comportamento_data)
        
        print(f"üë§ Usu√°rios analisados: {len(comportamento_df)}")
        print(f"üìä Total de eventos: {comportamento_df['total_eventos'].sum()}")
        print(f"üëÄ Page views: {comportamento_df['page_views'].sum()}")
        print(f"üõí Add to cart: {comportamento_df['add_to_cart'].sum()}")
        print(f"üîç Searches: {comportamento_df['searches'].sum()}")
        
        # Estat√≠sticas descritivas
        print("\nüìà Estat√≠sticas Descritivas:")
        print(f"  Eventos por usu√°rio (m√©dia): {comportamento_df['total_eventos'].mean():.1f}")
        print(f"  Taxa de convers√£o (m√©dia): {comportamento_df['taxa_conversao'].mean():.1%}")
        print(f"  Tempo m√©dio por evento: {comportamento_df['tempo_medio_evento'].mean():.1f}s")
        print(f"  Produtos √∫nicos (m√©dia): {comportamento_df['produtos_unicos'].mean():.1f}")
        
        # Top usu√°rios mais ativos
        print("\nüèÜ Top 5 Usu√°rios Mais Ativos:")
        top_usuarios = comportamento_df.head()
        for _, user in top_usuarios.iterrows():
            print(f"  {user['usuario_id']}: {user['total_eventos']} eventos, "
                  f"{user['taxa_conversao']:.1%} convers√£o")
        
        return comportamento_df
    else:
        print("‚ùå Nenhum dado de comportamento encontrado")
        return None

def analisar_recomendacoes(db):
    """Analisar sistema de recomenda√ß√µes"""
    print("\nüéØ AN√ÅLISE DE RECOMENDA√á√ïES")
    print("=" * 50)
    
    recomendacoes_collection = db['recomendacoes']
    
    # Contar recomenda√ß√µes
    total_recomendacoes = recomendacoes_collection.count_documents({})
    print(f"üéØ Total de recomenda√ß√µes: {total_recomendacoes}")
    
    # Pipeline para an√°lise de recomenda√ß√µes
    pipeline_recomendacoes = [
        {"$unwind": "$recomendacoes"},
        {"$group": {
            "_id": "$recomendacoes.produto_id",
            "total_recomendacoes": {"$sum": 1},
            "score_medio": {"$avg": "$recomendacoes.score"},
            "score_maximo": {"$max": "$recomendacoes.score"},
            "score_minimo": {"$min": "$recomendacoes.score"}
        }},
        {"$sort": {"total_recomendacoes": -1}}
    ]
    
    resultado_recomendacoes = list(recomendacoes_collection.aggregate(pipeline_recomendacoes))
    
    print("\nüìä Produtos Mais Recomendados:")
    for rec in resultado_recomendacoes:
        print(f"  {rec['_id']}:")
        print(f"    Recomenda√ß√µes: {rec['total_recomendacoes']}")
        print(f"    Score m√©dio: {rec['score_medio']:.3f}")
        print(f"    Score m√°ximo: {rec['score_maximo']:.3f}")
        print(f"    Score m√≠nimo: {rec['score_minimo']:.3f}")
    
    # An√°lise por algoritmo
    pipeline_algoritmo = [
        {"$group": {
            "_id": "$algoritmo",
            "total_recomendacoes": {"$sum": 1},
            "usuarios_unicos": {"$addToSet": "$usuario_id"}
        }},
        {"$project": {
            "algoritmo": "$_id",
            "total_recomendacoes": 1,
            "usuarios_unicos": {"$size": "$usuarios_unicos"}
        }}
    ]
    
    resultado_algoritmo = list(recomendacoes_collection.aggregate(pipeline_algoritmo))
    
    print("\nü§ñ An√°lise por Algoritmo:")
    for algo in resultado_algoritmo:
        print(f"  {algo['algoritmo']}:")
        print(f"    Total recomenda√ß√µes: {algo['total_recomendacoes']}")
        print(f"    Usu√°rios √∫nicos: {algo['usuarios_unicos']}")
    
    return resultado_recomendacoes

def criar_visualizacoes(comportamento_df, produtos_data):
    """Criar visualiza√ß√µes dos dados"""
    print("\nüìä CRIANDO VISUALIZA√á√ïES")
    print("=" * 50)
    
    if comportamento_df is None or comportamento_df.empty:
        print("‚ùå Dados insuficientes para visualiza√ß√µes")
        return
    
    # Configurar figura
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('üìä Dashboard MongoDB - An√°lise Preditiva E-commerce', fontsize=16, fontweight='bold')
    
    # Gr√°fico 1: Distribui√ß√£o de eventos
    axes[0, 0].hist(comportamento_df['total_eventos'], bins=15, alpha=0.7, color='skyblue', edgecolor='black')
    axes[0, 0].set_title('üì± Distribui√ß√£o de Eventos por Usu√°rio', fontweight='bold')
    axes[0, 0].set_xlabel('Total de Eventos')
    axes[0, 0].set_ylabel('Frequ√™ncia')
    axes[0, 0].grid(True, alpha=0.3)
    
    # Adicionar estat√≠sticas
    mean_events = comportamento_df['total_eventos'].mean()
    axes[0, 0].axvline(mean_events, color='red', linestyle='--', linewidth=2, label=f'M√©dia: {mean_events:.1f}')
    axes[0, 0].legend()
    
    # Gr√°fico 2: Taxa de convers√£o vs Page Views
    scatter = axes[0, 1].scatter(comportamento_df['page_views'], comportamento_df['taxa_conversao'], 
                               alpha=0.7, s=100, c=comportamento_df['total_eventos'], 
                               cmap='viridis', edgecolors='black')
    axes[0, 1].set_title('üéØ Taxa de Convers√£o vs Page Views', fontweight='bold')
    axes[0, 1].set_xlabel('Page Views')
    axes[0, 1].set_ylabel('Taxa de Convers√£o')
    axes[0, 1].grid(True, alpha=0.3)
    
    # Adicionar colorbar
    cbar = plt.colorbar(scatter, ax=axes[0, 1])
    cbar.set_label('Total de Eventos')
    
    # Gr√°fico 3: Tempo m√©dio por evento
    axes[1, 0].boxplot(comportamento_df['tempo_medio_evento'], patch_artist=True, 
                      boxprops=dict(facecolor='lightgreen', alpha=0.7))
    axes[1, 0].set_title('‚è±Ô∏è Tempo M√©dio por Evento', fontweight='bold')
    axes[1, 0].set_ylabel('Tempo (segundos)')
    axes[1, 0].grid(True, alpha=0.3)
    
    # Gr√°fico 4: Produtos √∫nicos vs Total de eventos
    axes[1, 1].scatter(comportamento_df['total_eventos'], comportamento_df['produtos_unicos'], 
                      alpha=0.7, s=100, c=comportamento_df['taxa_conversao'], 
                      cmap='plasma', edgecolors='black')
    axes[1, 1].set_title('üõçÔ∏è Produtos √önicos vs Total de Eventos', fontweight='bold')
    axes[1, 1].set_xlabel('Total de Eventos')
    axes[1, 1].set_ylabel('Produtos √önicos')
    axes[1, 1].grid(True, alpha=0.3)
    
    # Adicionar colorbar
    cbar2 = plt.colorbar(axes[1, 1].collections[0], ax=axes[1, 1])
    cbar2.set_label('Taxa de Convers√£o')
    
    # Ajustar layout
    plt.tight_layout()
    
    # Salvar gr√°fico
    plt.savefig('dashboard_mongodb.png', dpi=300, bbox_inches='tight')
    print("‚úÖ Dashboard salvo como 'dashboard_mongodb.png'")
    
    # Mostrar gr√°fico
    plt.show()

def demonstrar_operacoes_crud(db):
    """Demonstrar opera√ß√µes CRUD no MongoDB"""
    print("\nüîß DEMONSTRA√á√ÉO DE OPERA√á√ïES CRUD")
    print("=" * 50)
    
    produtos_collection = db['produtos']
    
    # CREATE - Inserir novo produto
    print("üìù CREATE - Inserindo novo produto...")
    novo_produto = {
        "produto_id": "P999",
        "nome": "Produto Demo",
        "categoria": "Eletr√¥nicos > Demo",
        "marca": "Demo",
        "preco": 999.99,
        "caracteristicas": {
            "demo": "true",
            "criado_em": datetime.now().isoformat()
        },
        "tags": ["demo", "teste"],
        "estoque": 10,
        "ativo": True,
        "data_criacao": datetime.now()
    }
    
    result = produtos_collection.insert_one(novo_produto)
    print(f"‚úÖ Produto inserido com ID: {result.inserted_id}")
    
    # READ - Buscar produto
    print("\nüîç READ - Buscando produto...")
    produto_encontrado = produtos_collection.find_one({"produto_id": "P999"})
    if produto_encontrado:
        print(f"‚úÖ Produto encontrado: {produto_encontrado['nome']}")
    
    # UPDATE - Atualizar produto
    print("\n‚úèÔ∏è UPDATE - Atualizando produto...")
    result = produtos_collection.update_one(
        {"produto_id": "P999"},
        {"$set": {
            "preco": 1299.99,
            "estoque": 15,
            "data_atualizacao": datetime.now()
        }}
    )
    print(f"‚úÖ Produto atualizado: {result.modified_count} documento(s)")
    
    # DELETE - Remover produto
    print("\nüóëÔ∏è DELETE - Removendo produto...")
    result = produtos_collection.delete_one({"produto_id": "P999"})
    print(f"‚úÖ Produto removido: {result.deleted_count} documento(s)")
    
    # Agrega√ß√£o complexa
    print("\nüìä AGREGA√á√ÉO COMPLEXA - Produtos por marca...")
    pipeline_marca = [
        {"$match": {"ativo": True}},
        {"$group": {
            "_id": "$marca",
            "total_produtos": {"$sum": 1},
            "preco_medio": {"$avg": "$preco"},
            "estoque_total": {"$sum": "$estoque"},
            "avaliacao_media": {"$avg": "$avaliacao_media"}
        }},
        {"$sort": {"total_produtos": -1}}
    ]
    
    resultado_marca = list(produtos_collection.aggregate(pipeline_marca))
    print("üìà An√°lise por Marca:")
    for marca in resultado_marca:
        print(f"  {marca['_id']}:")
        print(f"    Produtos: {marca['total_produtos']}")
        print(f"    Pre√ßo m√©dio: R$ {marca['preco_medio']:.2f}")
        print(f"    Estoque total: {marca['estoque_total']}")
        print(f"    Avalia√ß√£o m√©dia: {marca['avaliacao_media']:.1f}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ DEMONSTRA√á√ÉO MONGODB - AN√ÅLISE PREDITIVA E-COMMERCE")
    print("=" * 60)
    
    # Conectar ao MongoDB
    client, db = conectar_mongodb()
    if not client or not db:
        print("‚ùå N√£o foi poss√≠vel conectar ao MongoDB")
        return False
    
    try:
        # An√°lise de produtos
        produtos_data = analisar_produtos(db)
        
        # An√°lise de comportamento
        comportamento_df = analisar_comportamento(db)
        
        # An√°lise de recomenda√ß√µes
        recomendacoes_data = analisar_recomendacoes(db)
        
        # Criar visualiza√ß√µes
        criar_visualizacoes(comportamento_df, produtos_data)
        
        # Demonstrar opera√ß√µes CRUD
        demonstrar_operacoes_crud(db)
        
        print("\n" + "=" * 60)
        print("üéâ DEMONSTRA√á√ÉO MONGODB CONCLU√çDA COM SUCESSO!")
        print("üìä An√°lise preditiva implementada com dados NoSQL")
        print("üéØ Sistema de recomenda√ß√µes funcionando")
        print("üìà Visualiza√ß√µes criadas e salvas")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante a demonstra√ß√£o: {e}")
        return False
    
    finally:
        # Fechar conex√£o
        if client:
            client.close()
            print("\nüîå Conex√£o MongoDB fechada")

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)