#!/usr/bin/env python3
"""
Demonstra√ß√£o Pr√°tica - Sistema de Recomenda√ß√£o E-commerce
PostgreSQL + An√°lise Preditiva

Este script demonstra opera√ß√µes pr√°ticas com PostgreSQL para an√°lise preditiva
de um sistema de recomenda√ß√£o de produtos e-commerce.
"""

import psycopg2
from psycopg2.extras import RealDictCursor
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import random

class EcommercePostgreSQL:
    def __init__(self, host='localhost', database='ecommerce_demo', 
                 user='postgres', password='postgres'):
        """Inicializar conex√£o com PostgreSQL"""
        try:
            self.conn = psycopg2.connect(
                host=host,
                database=database,
                user=user,
                password=password
            )
            self.cursor = self.conn.cursor(cursor_factory=RealDictCursor)
            print("‚úÖ Conectado ao PostgreSQL com sucesso!")
        except Exception as e:
            print(f"‚ùå Erro ao conectar PostgreSQL: {e}")
            print("üí° Certifique-se de que o PostgreSQL est√° rodando e o banco existe")
    
    def criar_tabelas(self):
        """Criar tabelas necess√°rias para demonstra√ß√£o"""
        print("\nüîÑ Criando tabelas...")
        
        # Tabela de usu√°rios
        self.cursor.execute("""
            DROP TABLE IF EXISTS usuarios CASCADE;
            CREATE TABLE usuarios (
                id SERIAL PRIMARY KEY,
                usuario_id VARCHAR(50) UNIQUE NOT NULL,
                email VARCHAR(255) UNIQUE NOT NULL,
                nome VARCHAR(255) NOT NULL,
                sobrenome VARCHAR(255),
                data_nascimento DATE,
                genero VARCHAR(10),
                telefone VARCHAR(20),
                segmento VARCHAR(50),
                valor_total_compras DECIMAL(12,2) DEFAULT 0.00,
                data_cadastro TIMESTAMP DEFAULT NOW(),
                ultimo_login TIMESTAMP,
                ativo BOOLEAN DEFAULT TRUE
            );
        """)
        
        # Tabela de categorias
        self.cursor.execute("""
            DROP TABLE IF EXISTS categorias CASCADE;
            CREATE TABLE categorias (
                id SERIAL PRIMARY KEY,
                categoria_id VARCHAR(50) UNIQUE NOT NULL,
                nome VARCHAR(255) NOT NULL,
                descricao TEXT,
                categoria_pai_id INTEGER REFERENCES categorias(id),
                nivel INTEGER NOT NULL DEFAULT 1,
                ativo BOOLEAN DEFAULT TRUE,
                data_criacao TIMESTAMP DEFAULT NOW()
            );
        """)
        
        # Tabela de produtos
        self.cursor.execute("""
            DROP TABLE IF EXISTS produtos_relacional CASCADE;
            CREATE TABLE produtos_relacional (
                id SERIAL PRIMARY KEY,
                produto_id VARCHAR(50) UNIQUE NOT NULL,
                nome VARCHAR(255) NOT NULL,
                categoria_id INTEGER REFERENCES categorias(id),
                marca VARCHAR(100),
                preco DECIMAL(10,2) NOT NULL,
                preco_original DECIMAL(10,2),
                descricao TEXT,
                sku VARCHAR(100) UNIQUE,
                estoque INTEGER DEFAULT 0,
                estoque_minimo INTEGER DEFAULT 5,
                ativo BOOLEAN DEFAULT TRUE,
                destaque BOOLEAN DEFAULT FALSE,
                data_criacao TIMESTAMP DEFAULT NOW(),
                data_atualizacao TIMESTAMP DEFAULT NOW()
            );
        """)
        
        # Tabela de pedidos
        self.cursor.execute("""
            DROP TABLE IF EXISTS pedidos CASCADE;
            CREATE TABLE pedidos (
                id SERIAL PRIMARY KEY,
                pedido_id VARCHAR(50) UNIQUE NOT NULL,
                usuario_id INTEGER REFERENCES usuarios(id),
                status VARCHAR(50) NOT NULL DEFAULT 'pendente',
                valor_total DECIMAL(12,2) NOT NULL,
                valor_desconto DECIMAL(12,2) DEFAULT 0.00,
                valor_frete DECIMAL(10,2) DEFAULT 0.00,
                metodo_pagamento VARCHAR(50),
                endereco_entrega JSONB,
                observacoes TEXT,
                data_pedido TIMESTAMP DEFAULT NOW(),
                data_pagamento TIMESTAMP,
                data_entrega TIMESTAMP,
                data_cancelamento TIMESTAMP,
                motivo_cancelamento TEXT
            );
        """)
        
        # Tabela de itens do pedido
        self.cursor.execute("""
            DROP TABLE IF EXISTS itens_pedido CASCADE;
            CREATE TABLE itens_pedido (
                id SERIAL PRIMARY KEY,
                pedido_id INTEGER REFERENCES pedidos(id),
                produto_id VARCHAR(50) NOT NULL,
                nome_produto VARCHAR(255) NOT NULL,
                preco_unitario DECIMAL(10,2) NOT NULL,
                quantidade INTEGER NOT NULL,
                valor_total DECIMAL(12,2) NOT NULL,
                desconto DECIMAL(10,2) DEFAULT 0.00
            );
        """)
        
        # Tabela de carrinho
        self.cursor.execute("""
            DROP TABLE IF EXISTS carrinho_compras CASCADE;
            CREATE TABLE carrinho_compras (
                id SERIAL PRIMARY KEY,
                usuario_id INTEGER REFERENCES usuarios(id),
                produto_id VARCHAR(50) NOT NULL,
                quantidade INTEGER NOT NULL DEFAULT 1,
                preco_unitario DECIMAL(10,2) NOT NULL,
                data_adicao TIMESTAMP DEFAULT NOW(),
                data_atualizacao TIMESTAMP DEFAULT NOW(),
                UNIQUE(usuario_id, produto_id)
            );
        """)
        
        self.conn.commit()
        print("‚úÖ Tabelas criadas com sucesso!")
    
    def inserir_dados_exemplo(self):
        """Inserir dados de exemplo"""
        print("\nüîÑ Inserindo dados de exemplo...")
        
        # Inserir categorias
        categorias = [
            ('CAT001', 'Eletr√¥nicos', 'Produtos eletr√¥nicos em geral', None, 1),
            ('CAT002', 'Smartphones', 'Telefones inteligentes', 1, 2),
            ('CAT003', 'Notebooks', 'Computadores port√°teis', 1, 2),
            ('CAT004', 'Tablets', 'Tablets e dispositivos m√≥veis', 1, 2)
        ]
        
        for cat in categorias:
            self.cursor.execute("""
                INSERT INTO categorias (categoria_id, nome, descricao, categoria_pai_id, nivel)
                VALUES (%s, %s, %s, %s, %s)
            """, cat)
        
        # Inserir usu√°rios
        usuarios = [
            ('U001', 'joao.silva@email.com', 'Jo√£o', 'Silva', '1990-05-15', 'M', '(11) 99999-9999', 'high_value', 15750.50),
            ('U002', 'maria.santos@email.com', 'Maria', 'Santos', '1985-08-22', 'F', '(11) 88888-8888', 'medium_value', 3250.75),
            ('U003', 'pedro.oliveira@email.com', 'Pedro', 'Oliveira', '1995-12-03', 'M', '(11) 77777-7777', 'new_user', 0.00),
            ('U004', 'ana.costa@email.com', 'Ana', 'Costa', '1992-03-18', 'F', '(11) 66666-6666', 'medium_value', 2100.00),
            ('U005', 'carlos.ferreira@email.com', 'Carlos', 'Ferreira', '1988-11-25', 'M', '(11) 55555-5555', 'high_value', 8750.25)
        ]
        
        for user in usuarios:
            self.cursor.execute("""
                INSERT INTO usuarios (usuario_id, email, nome, sobrenome, data_nascimento, genero, telefone, segmento, valor_total_compras)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, user)
        
        # Inserir produtos
        produtos = [
            ('P001', 'Smartphone Galaxy S24', 2, 'Samsung', 2999.99, 3299.99, 'Smartphone com tela de 6.2 polegadas', 'SAM-GAL-S24-128', 45),
            ('P002', 'iPhone 15 Pro', 2, 'Apple', 8999.99, 9499.99, 'Smartphone premium com tela de 6.1 polegadas', 'APP-IPH-15P-128', 30),
            ('P003', 'Notebook Dell XPS 13', 3, 'Dell', 5999.99, 6499.99, 'Notebook ultrabook com tela de 13.4 polegadas', 'DEL-XPS-13-512', 20),
            ('P004', 'Tablet iPad Air', 4, 'Apple', 3999.99, 4299.99, 'Tablet com tela de 10.9 polegadas', 'APP-IPAD-AIR-64', 15),
            ('P005', 'Smartphone Xiaomi 13', 2, 'Xiaomi', 1999.99, 2299.99, 'Smartphone com excelente custo-benef√≠cio', 'XIA-MI-13-128', 60)
        ]
        
        for prod in produtos:
            self.cursor.execute("""
                INSERT INTO produtos_relacional (produto_id, nome, categoria_id, marca, preco, preco_original, descricao, sku, estoque)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, prod)
        
        # Inserir pedidos
        pedidos = [
            ('PED001', 1, 'concluido', 2999.99, 0.00, 15.00, 'cartao_credito', '2024-01-10 08:15:00', '2024-01-10 08:16:00', '2024-01-12 14:30:00'),
            ('PED002', 1, 'concluido', 5999.99, 300.00, 0.00, 'pix', '2024-01-12 16:45:00', '2024-01-12 16:46:00', '2024-01-15 10:20:00'),
            ('PED003', 2, 'pendente', 8999.99, 0.00, 25.00, 'cartao_credito', '2024-01-15 14:30:00', None, None),
            ('PED004', 2, 'concluido', 2499.99, 0.00, 20.00, 'cartao_debito', '2024-01-13 19:30:00', '2024-01-13 19:31:00', '2024-01-16 11:15:00'),
            ('PED005', 4, 'concluido', 3999.99, 200.00, 15.00, 'boleto', '2024-01-08 11:20:00', '2024-01-09 09:15:00', '2024-01-11 16:45:00'),
            ('PED006', 5, 'concluido', 1999.99, 0.00, 10.00, 'pix', '2024-01-14 10:30:00', '2024-01-14 10:31:00', '2024-01-17 09:30:00')
        ]
        
        for ped in pedidos:
            self.cursor.execute("""
                INSERT INTO pedidos (pedido_id, usuario_id, status, valor_total, valor_desconto, valor_frete, metodo_pagamento, data_pedido, data_pagamento, data_entrega)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, ped)
        
        # Inserir itens dos pedidos
        itens = [
            (1, 'P001', 'Smartphone Galaxy S24', 2999.99, 1, 2999.99, 0.00),
            (2, 'P003', 'Notebook Dell XPS 13', 5999.99, 1, 5999.99, 300.00),
            (3, 'P002', 'iPhone 15 Pro', 8999.99, 1, 8999.99, 0.00),
            (4, 'P005', 'Smartphone Xiaomi 13', 1999.99, 1, 1999.99, 0.00),
            (5, 'P004', 'Tablet iPad Air', 3999.99, 1, 3999.99, 200.00),
            (6, 'P005', 'Smartphone Xiaomi 13', 1999.99, 1, 1999.99, 0.00)
        ]
        
        for item in itens:
            self.cursor.execute("""
                INSERT INTO itens_pedido (pedido_id, produto_id, nome_produto, preco_unitario, quantidade, valor_total, desconto)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, item)
        
        self.conn.commit()
        print("‚úÖ Dados de exemplo inseridos com sucesso!")
    
    def analisar_vendas(self):
        """An√°lise descritiva das vendas"""
        print("\nüìä AN√ÅLISE DESCRITIVA - VENDAS")
        print("=" * 50)
        
        # Estat√≠sticas gerais
        self.cursor.execute("""
            SELECT 
                COUNT(*) as total_pedidos,
                SUM(valor_total) as receita_total,
                AVG(valor_total) as ticket_medio,
                COUNT(DISTINCT usuario_id) as usuarios_unicos
            FROM pedidos 
            WHERE status = 'concluido'
        """)
        
        stats = self.cursor.fetchone()
        print(f"üìà Estat√≠sticas Gerais:")
        print(f"  Total de pedidos: {stats['total_pedidos']}")
        print(f"  Receita total: R$ {stats['receita_total']:,.2f}")
        print(f"  Ticket m√©dio: R$ {stats['ticket_medio']:,.2f}")
        print(f"  Usu√°rios √∫nicos: {stats['usuarios_unicos']}")
        
        # An√°lise por produto
        self.cursor.execute("""
            SELECT 
                p.produto_id,
                p.nome,
                p.marca,
                p.preco,
                COUNT(ip.id) as total_vendas,
                SUM(ip.quantidade) as quantidade_vendida,
                SUM(ip.valor_total) as receita_total,
                AVG(ip.preco_unitario) as preco_medio_venda
            FROM produtos_relacional p
            LEFT JOIN itens_pedido ip ON p.produto_id = ip.produto_id
            LEFT JOIN pedidos ped ON ip.pedido_id = ped.id
            WHERE ped.status = 'concluido' OR ped.status IS NULL
            GROUP BY p.produto_id, p.nome, p.marca, p.preco
            ORDER BY receita_total DESC NULLS LAST
        """)
        
        produtos_stats = self.cursor.fetchall()
        
        print(f"\nüèÜ Top Produtos por Receita:")
        for produto in produtos_stats:
            print(f"  {produto['nome']} ({produto['marca']})")
            print(f"    Vendas: {produto['total_vendas'] or 0}")
            print(f"    Quantidade: {produto['quantidade_vendida'] or 0}")
            print(f"    Receita: R$ {produto['receita_total'] or 0:,.2f}")
            print()
    
    def analisar_usuarios(self):
        """An√°lise preditiva dos usu√°rios"""
        print("\nüîç AN√ÅLISE PREDITIVA - USU√ÅRIOS")
        print("=" * 50)
        
        # Query para an√°lise de usu√°rios
        self.cursor.execute("""
            SELECT 
                u.usuario_id,
                u.nome,
                u.segmento,
                u.valor_total_compras,
                COUNT(p.id) as total_pedidos,
                AVG(p.valor_total) as ticket_medio,
                COUNT(DISTINCT ip.produto_id) as produtos_unicos,
                MAX(p.data_pedido) as ultima_compra,
                EXTRACT(DAYS FROM NOW() - MAX(p.data_pedido)) as dias_sem_comprar,
                COUNT(CASE WHEN p.status = 'concluido' THEN 1 END) as pedidos_concluidos,
                COUNT(CASE WHEN p.status = 'pendente' THEN 1 END) as pedidos_pendentes
            FROM usuarios u
            LEFT JOIN pedidos p ON u.id = p.usuario_id
            LEFT JOIN itens_pedido ip ON p.id = ip.pedido_id
            GROUP BY u.usuario_id, u.nome, u.segmento, u.valor_total_compras
            ORDER BY u.valor_total_compras DESC
        """)
        
        usuarios_df = pd.DataFrame(self.cursor.fetchall())
        
        if not usuarios_df.empty:
            print("üë• An√°lise de Usu√°rios:")
            print(usuarios_df.to_string(index=False))
            
            # Estat√≠sticas descritivas
            print(f"\nüìä Estat√≠sticas Descritivas:")
            print(f"Usu√°rios analisados: {len(usuarios_df)}")
            print(f"Valor m√©dio de compras: R$ {usuarios_df['valor_total_compras'].mean():,.2f}")
            print(f"Pedidos m√©dios por usu√°rio: {usuarios_df['total_pedidos'].mean():.1f}")
            print(f"Ticket m√©dio: R$ {usuarios_df['ticket_medio'].mean():,.2f}")
            
            return usuarios_df
        else:
            print("‚ùå Nenhum dado de usu√°rio encontrado")
            return None
    
    def predicao_churn(self, usuarios_df):
        """Predi√ß√£o de churn de usu√°rios"""
        if usuarios_df is None or usuarios_df.empty:
            print("‚ùå Dados insuficientes para predi√ß√£o de churn")
            return
        
        print("\nüéØ PREDI√á√ÉO DE CHURN")
        print("=" * 50)
        
        # Preparar features para predi√ß√£o
        usuarios_df['dias_sem_comprar'] = usuarios_df['dias_sem_comprar'].fillna(365)  # Usu√°rios sem compras = 365 dias
        usuarios_df['ticket_medio'] = usuarios_df['ticket_medio'].fillna(0)
        usuarios_df['produtos_unicos'] = usuarios_df['produtos_unicos'].fillna(0)
        
        # Criar vari√°vel target (churn = dias sem comprar > 30)
        usuarios_df['churn'] = (usuarios_df['dias_sem_comprar'] > 30).astype(int)
        
        # Features para o modelo
        features = ['valor_total_compras', 'total_pedidos', 'ticket_medio', 'produtos_unicos', 'dias_sem_comprar']
        X = usuarios_df[features].fillna(0)
        y = usuarios_df['churn']
        
        # Dividir dados
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
        
        # Treinar modelo
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        
        # Fazer predi√ß√µes
        y_pred = model.predict(X_test)
        y_pred_proba = model.predict_proba(X_test)[:, 1]
        
        # Avaliar modelo
        print("üìà Relat√≥rio de Classifica√ß√£o:")
        print(classification_report(y_test, y_pred))
        
        print("\nüéØ Matriz de Confus√£o:")
        print(confusion_matrix(y_test, y_pred))
        
        # Import√¢ncia das features
        feature_importance = pd.DataFrame({
            'feature': features,
            'importance': model.feature_importances_
        }).sort_values('importance', ascending=False)
        
        print("\nüîç Import√¢ncia das Features:")
        print(feature_importance.to_string(index=False))
        
        # Predi√ß√µes para todos os usu√°rios
        usuarios_df['probabilidade_churn'] = model.predict_proba(X)[:, 1]
        usuarios_df['predicao_churn'] = model.predict(X)
        
        print(f"\nüë• Usu√°rios com Risco de Churn:")
        risco_churn = usuarios_df[usuarios_df['probabilidade_churn'] > 0.5]
        if not risco_churn.empty:
            print(risco_churn[['usuario_id', 'nome', 'probabilidade_churn', 'dias_sem_comprar']].to_string(index=False))
        else:
            print("Nenhum usu√°rio com risco alto de churn identificado")
        
        return usuarios_df
    
    def analisar_tendencias(self):
        """An√°lise de tend√™ncias temporais"""
        print("\nüìà AN√ÅLISE DE TEND√äNCIAS TEMPORAIS")
        print("=" * 50)
        
        # Vendas por dia
        self.cursor.execute("""
            SELECT 
                DATE(data_pedido) as data,
                COUNT(*) as total_pedidos,
                SUM(valor_total) as receita_dia,
                AVG(valor_total) as ticket_medio_dia
            FROM pedidos 
            WHERE status = 'concluido'
            GROUP BY DATE(data_pedido)
            ORDER BY data
        """)
        
        vendas_diarias = pd.DataFrame(self.cursor.fetchall())
        
        if not vendas_diarias.empty:
            print("üìÖ Vendas por Dia:")
            print(vendas_diarias.to_string(index=False))
            
            # Calcular crescimento
            vendas_diarias['crescimento_receita'] = vendas_diarias['receita_dia'].pct_change() * 100
            
            print(f"\nüìä Tend√™ncias:")
            print(f"Crescimento m√©dio di√°rio: {vendas_diarias['crescimento_receita'].mean():.1f}%")
            print(f"Maior crescimento: {vendas_diarias['crescimento_receita'].max():.1f}%")
            print(f"Menor crescimento: {vendas_diarias['crescimento_receita'].min():.1f}%")
            
            return vendas_diarias
        else:
            print("‚ùå Dados insuficientes para an√°lise temporal")
            return None
    
    def visualizar_dados(self, usuarios_df, vendas_diarias):
        """Criar visualiza√ß√µes dos dados"""
        print("\nüìä CRIANDO VISUALIZA√á√ïES")
        print("=" * 50)
        
        # Configurar estilo
        plt.style.use('seaborn-v0_8')
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        fig.suptitle('An√°lise Preditiva - PostgreSQL E-commerce', fontsize=16)
        
        # Gr√°fico 1: Distribui√ß√£o de valores de compra
        if usuarios_df is not None and not usuarios_df.empty:
            axes[0, 0].hist(usuarios_df['valor_total_compras'], bins=10, alpha=0.7, color='skyblue')
            axes[0, 0].set_title('Distribui√ß√£o de Valores de Compra')
            axes[0, 0].set_xlabel('Valor Total Compras (R$)')
            axes[0, 0].set_ylabel('Frequ√™ncia')
        
        # Gr√°fico 2: Segmentos de usu√°rios
        if usuarios_df is not None and not usuarios_df.empty:
            segmentos = usuarios_df['segmento'].value_counts()
            axes[0, 1].pie(segmentos.values, labels=segmentos.index, autopct='%1.1f%%', startangle=90)
            axes[0, 1].set_title('Distribui√ß√£o por Segmento')
        
        # Gr√°fico 3: Vendas por dia
        if vendas_diarias is not None and not vendas_diarias.empty:
            axes[1, 0].plot(vendas_diarias['data'], vendas_diarias['receita_dia'], marker='o', color='green')
            axes[1, 0].set_title('Receita por Dia')
            axes[1, 0].set_xlabel('Data')
            axes[1, 0].set_ylabel('Receita (R$)')
            axes[1, 0].tick_params(axis='x', rotation=45)
        
        # Gr√°fico 4: Produtos mais vendidos
        self.cursor.execute("""
            SELECT 
                p.nome,
                SUM(ip.quantidade) as quantidade_vendida
            FROM produtos_relacional p
            LEFT JOIN itens_pedido ip ON p.produto_id = ip.produto_id
            LEFT JOIN pedidos ped ON ip.pedido_id = ped.id
            WHERE ped.status = 'concluido'
            GROUP BY p.nome
            ORDER BY quantidade_vendida DESC
            LIMIT 5
        """)
        
        produtos_vendidos = self.cursor.fetchall()
        if produtos_vendidos:
            nomes = [p['nome'][:15] + '...' if len(p['nome']) > 15 else p['nome'] for p in produtos_vendidos]
            quantidades = [p['quantidade_vendida'] or 0 for p in produtos_vendidos]
            axes[1, 1].bar(nomes, quantidades, color=['red', 'blue', 'green', 'orange', 'purple'], alpha=0.7)
            axes[1, 1].set_title('Top 5 Produtos Vendidos')
            axes[1, 1].set_ylabel('Quantidade Vendida')
            axes[1, 1].tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        plt.savefig('analise_postgresql_demo.png', dpi=300, bbox_inches='tight')
        print("‚úÖ Gr√°ficos salvos em 'analise_postgresql_demo.png'")
        plt.show()
    
    def demonstrar_operacoes(self):
        """Demonstrar opera√ß√µes CRUD b√°sicas"""
        print("\nüîß DEMONSTRA√á√ÉO DE OPERA√á√ïES CRUD")
        print("=" * 50)
        
        # CREATE - Inserir novo usu√°rio
        print("1Ô∏è‚É£ CREATE - Inserindo novo usu√°rio...")
        self.cursor.execute("""
            INSERT INTO usuarios (usuario_id, email, nome, sobrenome, data_nascimento, genero, telefone, segmento)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            RETURNING id, usuario_id
        """, ('U006', 'novo.usuario@email.com', 'Novo', 'Usu√°rio', '1990-01-01', 'M', '(11) 44444-4444', 'new_user'))
        
        novo_usuario = self.cursor.fetchone()
        print(f"‚úÖ Usu√°rio inserido: ID {novo_usuario['id']}, Usuario ID {novo_usuario['usuario_id']}")
        
        # READ - Buscar usu√°rios por segmento
        print("\n2Ô∏è‚É£ READ - Buscando usu√°rios high_value...")
        self.cursor.execute("""
            SELECT usuario_id, nome, email, valor_total_compras
            FROM usuarios 
            WHERE segmento = %s
            ORDER BY valor_total_compras DESC
        """, ('high_value',))
        
        usuarios_high_value = self.cursor.fetchall()
        print(f"üí∞ Encontrados {len(usuarios_high_value)} usu√°rios high_value:")
        for usuario in usuarios_high_value:
            print(f"  - {usuario['nome']} - R$ {usuario['valor_total_compras']:,.2f}")
        
        # UPDATE - Atualizar segmento do usu√°rio
        print("\n3Ô∏è‚É£ UPDATE - Atualizando segmento do usu√°rio...")
        self.cursor.execute("""
            UPDATE usuarios
            SET segmento = %s, data_atualizacao = NOW()
            WHERE usuario_id = %s
        """, ('medium_value', 'U006'))
        
        print(f"‚úÖ {self.cursor.rowcount} usu√°rio(s) atualizado(s)")
        
        # DELETE - Remover usu√°rio (soft delete)
        print("\n4Ô∏è‚É£ DELETE - Desativando usu√°rio...")
        self.cursor.execute("""
            UPDATE usuarios
            SET ativo = FALSE
            WHERE usuario_id = %s
        """, ('U006',))
        
        print(f"‚úÖ {self.cursor.rowcount} usu√°rio(s) desativado(s)")
        
        self.conn.commit()
    
    def executar_demonstracao_completa(self):
        """Executar demonstra√ß√£o completa"""
        print("üöÄ DEMONSTRA√á√ÉO PR√ÅTICA - POSTGRESQL + AN√ÅLISE PREDITIVA")
        print("=" * 70)
        
        try:
            # 1. Criar tabelas
            self.criar_tabelas()
            
            # 2. Inserir dados
            self.inserir_dados_exemplo()
            
            # 3. An√°lise descritiva
            self.analisar_vendas()
            
            # 4. An√°lise preditiva
            usuarios_df = self.analisar_usuarios()
            
            # 5. Predi√ß√£o de churn
            if usuarios_df is not None:
                usuarios_df = self.predicao_churn(usuarios_df)
            
            # 6. An√°lise de tend√™ncias
            vendas_diarias = self.analisar_tendencias()
            
            # 7. Opera√ß√µes CRUD
            self.demonstrar_operacoes()
            
            # 8. Visualiza√ß√µes
            self.visualizar_dados(usuarios_df, vendas_diarias)
            
            print("\nüéâ DEMONSTRA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("=" * 70)
            print("üìä Dados analisados:")
            print(f"  - Usu√°rios: {self.cursor.execute('SELECT COUNT(*) FROM usuarios'); self.cursor.fetchone()[0]}")
            print(f"  - Produtos: {self.cursor.execute('SELECT COUNT(*) FROM produtos_relacional'); self.cursor.fetchone()[0]}")
            print(f"  - Pedidos: {self.cursor.execute('SELECT COUNT(*) FROM pedidos'); self.cursor.fetchone()[0]}")
            print("\nüí° Pr√≥ximos passos:")
            print("  - Integrar com MongoDB para dados n√£o estruturados")
            print("  - Implementar algoritmos de ML mais avan√ßados")
            print("  - Deploy em produ√ß√£o com monitoramento")
            
        except Exception as e:
            print(f"‚ùå Erro durante demonstra√ß√£o: {e}")
        finally:
            self.cursor.close()
            self.conn.close()

def main():
    """Fun√ß√£o principal"""
    print("üéØ Iniciando Demonstra√ß√£o Pr√°tica PostgreSQL + An√°lise Preditiva")
    
    # Criar inst√¢ncia da classe
    demo = EcommercePostgreSQL()
    
    # Executar demonstra√ß√£o
    demo.executar_demonstracao_completa()

if __name__ == "__main__":
    main()
