#!/usr/bin/env python3
"""
üöÄ API DEMO - Sistema de Recomenda√ß√£o E-commerce
FastAPI + An√°lise Preditiva

Esta API demonstra endpoints pr√°ticos para um sistema de recomenda√ß√£o
de produtos e-commerce com an√°lise preditiva.
"""

from fastapi import FastAPI, HTTPException, Query
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
from typing import List, Dict, Optional
import pandas as pd
import numpy as np
import json
from datetime import datetime
import uvicorn

# Importar a classe de demonstra√ß√£o
from demo_completo import EcommerceAnalyticsDemo

# Criar inst√¢ncia da API
app = FastAPI(
    title="üéØ E-commerce Analytics API",
    description="API para Sistema de Recomenda√ß√£o de Produtos com An√°lise Preditiva",
    version="1.0.0"
)

# Inst√¢ncia global da demonstra√ß√£o
demo_instance = None

# Modelos Pydantic
class UsuarioResponse(BaseModel):
    usuario_id: str
    nome: str
    segmento: str
    valor_total_compras: float
    total_pedidos: int
    taxa_conversao: float
    cluster: Optional[str] = None
    probabilidade_churn: Optional[float] = None

class ProdutoResponse(BaseModel):
    produto_id: str
    nome: str
    categoria: str
    preco: float
    marca: str

class RecomendacaoResponse(BaseModel):
    usuario_id: str
    recomendacoes: List[Dict]
    algoritmo: str
    timestamp: str

class AnalyticsResponse(BaseModel):
    total_usuarios: int
    total_produtos: int
    receita_total: float
    taxa_conversao_media: float
    usuarios_churn_alto: int

@app.on_event("startup")
async def startup_event():
    """Inicializar dados na startup"""
    global demo_instance
    print("üöÄ Inicializando API...")
    demo_instance = EcommerceAnalyticsDemo()
    demo_instance.criar_dados_simulados()
    demo_instance.clustering_usuarios()
    demo_instance.predicao_churn()
    print("‚úÖ API inicializada com sucesso!")

@app.get("/", response_class=HTMLResponse)
async def root():
    """P√°gina inicial da API"""
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>üéØ E-commerce Analytics API</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            h1 { color: #2c3e50; text-align: center; }
            .endpoint { background: #ecf0f1; padding: 15px; margin: 10px 0; border-radius: 5px; }
            .method { color: #27ae60; font-weight: bold; }
            .url { color: #3498db; font-family: monospace; }
            .description { color: #7f8c8d; margin-top: 5px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéØ E-commerce Analytics API</h1>
            <p>Sistema de Recomenda√ß√£o de Produtos com An√°lise Preditiva</p>
            
            <h2>üìö Endpoints Dispon√≠veis:</h2>
            
            <div class="endpoint">
                <span class="method">GET</span> <span class="url">/analytics/overview</span>
                <div class="description">Vis√£o geral das m√©tricas do sistema</div>
            </div>
            
            <div class="endpoint">
                <span class="method">GET</span> <span class="url">/usuarios</span>
                <div class="description">Listar todos os usu√°rios com suas m√©tricas</div>
            </div>
            
            <div class="endpoint">
                <span class="method">GET</span> <span class="url">/usuarios/{usuario_id}</span>
                <div class="description">Detalhes de um usu√°rio espec√≠fico</div>
            </div>
            
            <div class="endpoint">
                <span class="method">GET</span> <span class="url">/produtos</span>
                <div class="description">Listar todos os produtos dispon√≠veis</div>
            </div>
            
            <div class="endpoint">
                <span class="method">GET</span> <span class="url">/recomendacoes/{usuario_id}</span>
                <div class="description">Recomenda√ß√µes personalizadas para um usu√°rio</div>
            </div>
            
            <div class="endpoint">
                <span class="method">GET</span> <span class="url">/clusters</span>
                <div class="description">An√°lise de clusters de usu√°rios</div>
            </div>
            
            <div class="endpoint">
                <span class="method">GET</span> <span class="url">/churn</span>
                <div class="description">An√°lise de risco de churn</div>
            </div>
            
            <div class="endpoint">
                <span class="method">GET</span> <span class="url">/docs</span>
                <div class="description">Documenta√ß√£o interativa da API (Swagger)</div>
            </div>
            
            <h2>üîß Como usar:</h2>
            <p>1. Acesse <a href="/docs">/docs</a> para documenta√ß√£o interativa</p>
            <p>2. Use os endpoints acima para obter dados e an√°lises</p>
            <p>3. Exemplo: <code>GET /usuarios/U001</code> para dados do usu√°rio U001</p>
        </div>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.get("/analytics/overview", response_model=AnalyticsResponse)
async def get_analytics_overview():
    """Obter vis√£o geral das m√©tricas do sistema"""
    if demo_instance is None:
        raise HTTPException(status_code=500, detail="Sistema n√£o inicializado")
    
    return AnalyticsResponse(
        total_usuarios=len(demo_instance.comportamento_df),
        total_produtos=len(demo_instance.produtos_df),
        receita_total=demo_instance.usuarios_transacionais['valor_total_compras'].sum(),
        taxa_conversao_media=demo_instance.comportamento_df['taxa_conversao'].mean(),
        usuarios_churn_alto=(demo_instance.usuarios_transacionais['probabilidade_churn'] > 0.7).sum()
    )

@app.get("/usuarios", response_model=List[UsuarioResponse])
async def get_usuarios(limit: int = Query(10, description="N√∫mero m√°ximo de usu√°rios")):
    """Listar usu√°rios com suas m√©tricas"""
    if demo_instance is None:
        raise HTTPException(status_code=500, detail="Sistema n√£o inicializado")
    
    usuarios = []
    for _, user_comp in demo_instance.comportamento_df.head(limit).iterrows():
        user_trans = demo_instance.usuarios_transacionais[
            demo_instance.usuarios_transacionais['usuario_id'] == user_comp['usuario_id']
        ].iloc[0]
        
        cluster_names = {0: 'Passivo', 1: 'Ativo Baixa Conv.', 2: 'Ativo Convertido'}
        cluster_name = cluster_names.get(user_comp.get('cluster', 0), 'N/A')
        
        usuarios.append(UsuarioResponse(
            usuario_id=user_comp['usuario_id'],
            nome=user_trans['nome'],
            segmento=user_trans['segmento'],
            valor_total_compras=user_trans['valor_total_compras'],
            total_pedidos=user_trans['total_pedidos'],
            taxa_conversao=user_comp['taxa_conversao'],
            cluster=cluster_name,
            probabilidade_churn=user_trans.get('probabilidade_churn', 0)
        ))
    
    return usuarios

@app.get("/usuarios/{usuario_id}", response_model=UsuarioResponse)
async def get_usuario(usuario_id: str):
    """Obter detalhes de um usu√°rio espec√≠fico"""
    if demo_instance is None:
        raise HTTPException(status_code=500, detail="Sistema n√£o inicializado")
    
    user_comp = demo_instance.comportamento_df[
        demo_instance.comportamento_df['usuario_id'] == usuario_id
    ]
    
    if user_comp.empty:
        raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")
    
    user_trans = demo_instance.usuarios_transacionais[
        demo_instance.usuarios_transacionais['usuario_id'] == usuario_id
    ].iloc[0]
    
    user_comp = user_comp.iloc[0]
    
    cluster_names = {0: 'Passivo', 1: 'Ativo Baixa Conv.', 2: 'Ativo Convertido'}
    cluster_name = cluster_names.get(user_comp.get('cluster', 0), 'N/A')
    
    return UsuarioResponse(
        usuario_id=usuario_id,
        nome=user_trans['nome'],
        segmento=user_trans['segmento'],
        valor_total_compras=user_trans['valor_total_compras'],
        total_pedidos=user_trans['total_pedidos'],
        taxa_conversao=user_comp['taxa_conversao'],
        cluster=cluster_name,
        probabilidade_churn=user_trans.get('probabilidade_churn', 0)
    )

@app.get("/produtos", response_model=List[ProdutoResponse])
async def get_produtos():
    """Listar todos os produtos dispon√≠veis"""
    if demo_instance is None:
        raise HTTPException(status_code=500, detail="Sistema n√£o inicializado")
    
    produtos = []
    for _, produto in demo_instance.produtos_df.iterrows():
        produtos.append(ProdutoResponse(
            produto_id=produto['id'],
            nome=produto['nome'],
            categoria=produto['categoria'],
            preco=produto['preco'],
            marca=produto['marca']
        ))
    
    return produtos

@app.get("/recomendacoes/{usuario_id}", response_model=RecomendacaoResponse)
async def get_recomendacoes(usuario_id: str, limit: int = Query(5, description="N√∫mero de recomenda√ß√µes")):
    """Obter recomenda√ß√µes personalizadas para um usu√°rio"""
    if demo_instance is None:
        raise HTTPException(status_code=500, detail="Sistema n√£o inicializado")
    
    # Verificar se usu√°rio existe
    user_exists = usuario_id in demo_instance.comportamento_df['usuario_id'].values
    if not user_exists:
        raise HTTPException(status_code=404, detail="Usu√°rio n√£o encontrado")
    
    # Implementar sistema de recomenda√ß√µes (vers√£o simplificada)
    def calcular_score_recomendacao(usuario_id, produto_id):
        score = 0.0
        motivos = []
        
        user_comp = demo_instance.comportamento_df[
            demo_instance.comportamento_df['usuario_id'] == usuario_id
        ].iloc[0]
        user_trans = demo_instance.usuarios_transacionais[
            demo_instance.usuarios_transacionais['usuario_id'] == usuario_id
        ].iloc[0]
        produto = demo_instance.produtos_df[demo_instance.produtos_df['id'] == produto_id].iloc[0]
        
        # Score baseado em comportamento
        if user_comp['total_eventos'] > demo_instance.comportamento_df['total_eventos'].mean():
            score += 0.2
            motivos.append("usu√°rio_ativo")
        
        if user_comp['taxa_conversao'] > demo_instance.comportamento_df['taxa_conversao'].mean():
            score += 0.15
            motivos.append("alta_convers√£o")
        
        # Score baseado em segmento
        if user_trans['segmento'] == 'high_value':
            if produto['preco'] > 5000:
                score += 0.3
                motivos.append("segmento_premium")
            else:
                score += 0.1
                motivos.append("produto_acess√≠vel")
        elif user_trans['segmento'] == 'new_user':
            if produto['preco'] < 3000:
                score += 0.25
                motivos.append("novo_usu√°rio")
        
        # Score baseado em cluster
        if 'cluster' in user_comp:
            cluster = user_comp['cluster']
            if cluster == 2:  # Ativos e convertidos
                score += 0.2
                motivos.append("cluster_ativo_convertido")
            elif cluster == 1:  # Ativos mas baixa convers√£o
                if produto['preco'] < 4000:
                    score += 0.15
                    motivos.append("cluster_ativo_baixa_conv")
        
        # Adicionar score baseado em categoria
        categoria_scores = {'smartphones': 0.1, 'notebooks': 0.08, 'tablets': 0.06}
        score += categoria_scores.get(produto['categoria'], 0.03)
        
        # Adicionar ru√≠do aleat√≥rio
        import random
        score += random.uniform(-0.05, 0.05)
        score = max(0, min(1, score))
        
        return score, motivos
    
    # Calcular recomenda√ß√µes
    recomendacoes = []
    for _, produto in demo_instance.produtos_df.iterrows():
        score, motivos = calcular_score_recomendacao(usuario_id, produto['id'])
        recomendacoes.append({
            'produto_id': produto['id'],
            'nome': produto['nome'],
            'categoria': produto['categoria'],
            'preco': produto['preco'],
            'marca': produto['marca'],
            'score': round(score, 3),
            'motivos': motivos
        })
    
    # Ordenar por score e limitar
    recomendacoes.sort(key=lambda x: x['score'], reverse=True)
    recomendacoes = recomendacoes[:limit]
    
    return RecomendacaoResponse(
        usuario_id=usuario_id,
        recomendacoes=recomendacoes,
        algoritmo="collaborative_filtering + content_based",
        timestamp=datetime.now().isoformat()
    )

@app.get("/clusters")
async def get_clusters():
    """Obter an√°lise de clusters de usu√°rios"""
    if demo_instance is None:
        raise HTTPException(status_code=500, detail="Sistema n√£o inicializado")
    
    if 'cluster' not in demo_instance.comportamento_df.columns:
        raise HTTPException(status_code=500, detail="Clusters n√£o calculados")
    
    cluster_analysis = {}
    cluster_names = {0: "Passivos", 1: "Ativos Baixa Conv.", 2: "Ativos Convertidos"}
    
    for cluster_id in range(3):
        cluster_data = demo_instance.comportamento_df[
            demo_instance.comportamento_df['cluster'] == cluster_id
        ]
        
        cluster_analysis[cluster_names[cluster_id]] = {
            'total_usuarios': len(cluster_data),
            'percentual': round(len(cluster_data) / len(demo_instance.comportamento_df) * 100, 1),
            'eventos_medios': round(cluster_data['total_eventos'].mean(), 1),
            'taxa_conversao_media': round(cluster_data['taxa_conversao'].mean(), 3),
            'produtos_unicos_medios': round(cluster_data['produtos_unicos'].mean(), 1),
            'tempo_medio_evento': round(cluster_data['tempo_medio_evento'].mean(), 1)
        }
    
    return {
        'clusters': cluster_analysis,
        'total_usuarios': len(demo_instance.comportamento_df),
        'algoritmo': 'K-Means',
        'features': ['total_eventos', 'page_views', 'clicks', 'add_to_cart', 'produtos_unicos', 'taxa_conversao']
    }

@app.get("/churn")
async def get_churn_analysis():
    """Obter an√°lise de risco de churn"""
    if demo_instance is None:
        raise HTTPException(status_code=500, detail="Sistema n√£o inicializado")
    
    if 'probabilidade_churn' not in demo_instance.usuarios_transacionais.columns:
        raise HTTPException(status_code=500, detail="Modelo de churn n√£o treinado")
    
    # Usu√°rios com alto risco de churn
    risco_alto = demo_instance.usuarios_transacionais[
        demo_instance.usuarios_transacionais['probabilidade_churn'] > 0.7
    ].sort_values('probabilidade_churn', ascending=False)
    
    # Usu√°rios com m√©dio risco
    risco_medio = demo_instance.usuarios_transacionais[
        (demo_instance.usuarios_transacionais['probabilidade_churn'] > 0.3) &
        (demo_instance.usuarios_transacionais['probabilidade_churn'] <= 0.7)
    ]
    
    # Usu√°rios com baixo risco
    risco_baixo = demo_instance.usuarios_transacionais[
        demo_instance.usuarios_transacionais['probabilidade_churn'] <= 0.3
    ]
    
    return {
        'resumo': {
            'total_usuarios': len(demo_instance.usuarios_transacionais),
            'risco_alto': len(risco_alto),
            'risco_medio': len(risco_medio),
            'risco_baixo': len(risco_baixo),
            'taxa_churn_atual': round(demo_instance.usuarios_transacionais['churn'].mean(), 3)
        },
        'usuarios_risco_alto': [
            {
                'usuario_id': user['usuario_id'],
                'nome': user['nome'],
                'probabilidade_churn': round(user['probabilidade_churn'], 3),
                'dias_sem_comprar': int(user['dias_sem_comprar']),
                'valor_total_compras': round(user['valor_total_compras'], 2),
                'segmento': user['segmento']
            }
            for _, user in risco_alto.head(10).iterrows()
        ],
        'modelo': {
            'algoritmo': 'Random Forest',
            'features': ['valor_total_compras', 'total_pedidos', 'ticket_medio', 'produtos_unicos_comprados', 'dias_sem_comprar', 'variabilidade_gastos'],
            'acuracia': 'Calculada durante treinamento'
        }
    }

@app.get("/health")
async def health_check():
    """Verificar sa√∫de da API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0",
        "sistema_inicializado": demo_instance is not None
    }

if __name__ == "__main__":
    print("üöÄ Iniciando API de Demonstra√ß√£o...")
    print("üìä Sistema de Recomenda√ß√£o E-commerce")
    print("üîó Acesse: http://localhost:8000")
    print("üìö Documenta√ß√£o: http://localhost:8000/docs")
    
    uvicorn.run(
        "api_demo:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
